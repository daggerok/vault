notifications:
  email: false

language: java
jdk: openjdk8
python: 3.8

services:
- docker

os: linux
arch: amd64
addons:
  apt:
    update: false
    packages:
    - jq
    - curl
    - unzip
    - httpie
    - docker-ce
    - libxml2-utils

install: true
before_install:

  - export VAULT_VERSION="0.8.1"
  - export VAULT_PLATFORM="linux_amd64"
  - export VAULT_ZIP="vault_${VAULT_VERSION}_$VAULT_PLATFORM.zip"
  - export VAULT_URL="https://releases.hashicorp.com/vault/$VAULT_VERSION/$VAULT_ZIP"
  - curl -O $VAULT_URL
  - unzip $VAULT_ZIP
  - mkdir -p ~/.local/daggerok/bin
  - mv -f vault ~/.local/daggerok/bin/
  - export PATH="$HOME/.local/daggerok/bin:$PATH"
  #
  - |
    if [ ! -f ${HOME}/.local/daggerok/bash-functions/master/main.bash ] ; then
      mkdir -p ${HOME}/.local/daggerok/bash-functions/master ;
      curl -s https://raw.githubusercontent.com/daggerok/bash-functions/master/main.bash > ${HOME}/.local/daggerok/bash-functions/master/main.bash ;
    fi
    source ${HOME}/.local/daggerok/bash-functions/master/main.bash ;
  - stop_any 80 8001 8002 8080 5432 3306

jobs:
  include:

  - stage: test
    name: template tests
    script: ./gradlew -p 0-template clean build

  - stage: test
    name: useless-shit tests
    script: ./gradlew useless-shit-build

  - stage: test
    name: hello-world tests
    script:
    - ./gradlew hello-world-build

  - stage: test
    name: hello-world integration tests
    script:
    - ./gradlew hello-world-build
    #
    - ./gradlew hello-world-composeUp
    #
    - echo "myroot" > ~/.vault-token
    - sleep 1
    - export VAULT_ADDR='http://0.0.0.0:8200'
    #
    - sleep 1
    - vault auth $(cat ~/.vault-token)
    #
    - vault write /secret/app/config/host hostname=localhost
    - vault write /secret/app/config/user username=user password=pass
    - sleep 1
    #
    - vault read /secret/app/config/host
    - vault read --format=json /secret/app/config/host | jq -r .data
    #
    - http :8200/v1/secret/app/config/user X-Vault-Token:`cat ~/.vault-token`
    - curl -sS localhost:8200/v1/secret/app/config/host -H "X-Vault-Token:$(cat ~/.vault-token)" | jq
    - http -b --pretty=none :8200/v1/secret/app/config/user X-Vault-Token:`cat ~/.vault-token` | jq .data.password

  - stage: test
    name: mysql-backend integration tests
    script:
    - ./gradlew mysql-backend-composeUp
    #
    - echo "myroot" > ~/.vault-token
    - sleep 1
    - export VAULT_ADDR='http://0.0.0.0:8200'
    #
    - sleep 1
    - vault auth `cat ~/.vault-token`
    #
    - sleep 1
    - vault mount mysql
    - sleep 1
    - vault write mysql/config/connection connection_url="vault:vault@tcp(mysql:3306)/vault"
    #
    - sleep 1
    - vault write mysql/roles/readonly \
      sql="CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT ON *.* TO '{{name}}'@'%';"
    #
    - sleep 1
    - http :8200/v1/mysql/roles/readonly X-Vault-Token:`cat ~/.vault-token`
    - http :8200/v1/mysql/creds/readonly X-Vault-Token:`cat ~/.vault-token`
    #
    - vault write mysql/config/connection connection_url="root:mysql@tcp(mysql:3306)/vault"
    #
    - sleep 1
    - export JSON=$(http -b --pretty=none :8200/v1/mysql/creds/readonly X-Vault-Token:`cat ~/.vault-token`)
    - export USER=$(echo $JSON | jq -r '.data.username')
    - export PASSWORD=$(echo $JSON | jq -r '.data.password')
    - echo $USER\n$PASSWORD

after_script:
  - ./gradlew composeDown

before_cache:
  - bash gradlew --stop
  - rm -rf ~/.gradle/caches/modules-2/modules-2.lock
  - rm -rf ~/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - ~/.m2/
    - ~/.gradle
    - ~/.local/daggerok/bin
